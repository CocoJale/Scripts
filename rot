local modelName = "Te Te Te Te Te Te Te Te Te Te Sahur"
local teleportDelay = 1

local knownWorldPositions = {
    Vector3.new(-462, 194, 660),
    Vector3.new(327, 155, 744),
    Vector3.new(571, 102, 0),
    Vector3.new(-643, 105, -867),
    Vector3.new(-1821, 144, 417),
    Vector3.new(-2588, 110, -835),
    Vector3.new(-2225, 288, -3616),
    Vector3.new(-3581, 81, 1002),
}

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local p = Players.LocalPlayer
local rf = ReplicatedStorage.Packages.Knit.Services.MonsterService.RF.RequestAttack

local function getRoot(char)
    return char and (char:FindFirstChild("HumanoidRootPart") or char:FindFirstChildWhichIsA("BasePart"))
end

task.spawn(function()
    local index = 1
    while true do
        local char = p.Character or p.CharacterAdded:Wait()
        local hrp = getRoot(char)
        if hrp then
            local foundModel = nil
            for _, v in pairs(workspace:GetDescendants()) do
                if v:IsA("Model") and v.Name == modelName and v:FindFirstChild("ZoneHitbox") then
                    foundModel = v
                    break
                end
            end

            if foundModel then
                hrp.CFrame = foundModel:GetModelCFrame()
                index = 1
            else
                local pos = knownWorldPositions[index]
                hrp.CFrame = CFrame.new(pos + Vector3.new(0, 5, 0))
                index = index + 1
                if index > #knownWorldPositions then
                    index = 1
                end
            end
        end
        task.wait(teleportDelay)
    end
end)

task.spawn(function()
    while true do
        local char = p.Character or p.CharacterAdded:Wait()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if hrp then
            local pos = hrp.Position
            local dir = hrp.CFrame.LookVector
            rf:InvokeServer(CFrame.new(pos + dir * 5, pos + dir * 6))
        end
        task.wait(0.03)
    end
end)
