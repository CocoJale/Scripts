local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()

local Tab1 = Library:NewWindow("AWS")
local Tab1Section1 = Tab1:NewSection("Tab1")

-- Auto Crit Hit Toggle
local autoCritHit = false
Tab1Section1:CreateToggle("Auto Crit Hit", function(value)
    autoCritHit = value
    if autoCritHit then
        task.spawn(function()
            while autoCritHit do
                for i = 1, 2 do
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("Packages")
                        :WaitForChild("Knit")
                        :WaitForChild("Services")
                        :WaitForChild("ArmWrestleService")
                        :WaitForChild("RF")
                        :WaitForChild("RequestCritHit")
                        :InvokeServer()
                end
                task.wait()
            end
        end)
    end
end)

-- Auto Buy Merchant Toggle
local autoBuyMerchant = false
Tab1Section1:CreateToggle("Auto Buy Merchant", function(value)
    autoBuyMerchant = value
    if autoBuyMerchant then
        task.spawn(function()
            while autoBuyMerchant do
                for i = 1, 5 do
                    local args = { "Hidden Merchant", i }
                    game:GetService("ReplicatedStorage")
                        :WaitForChild("Packages")
                        :WaitForChild("Knit")
                        :WaitForChild("Services")
                        :WaitForChild("LimitedMerchantService")
                        :WaitForChild("RF")
                        :WaitForChild("BuyItem")
                        :InvokeServer(unpack(args))
                end
                task.wait(10)
            end
        end)
    end
end)

-- Auto Roll Aura Toggle
local autoRollAura = false
Tab1Section1:CreateToggle("Auto Roll Aura", function(value)
    autoRollAura = value
    if autoRollAura then
        task.spawn(function()
            while autoRollAura do
                game:GetService("ReplicatedStorage")
                    :WaitForChild("Packages")
                    :WaitForChild("Knit")
                    :WaitForChild("Services")
                    :WaitForChild("AuraService")
                    :WaitForChild("RF")
                    :WaitForChild("Roll")
                    :InvokeServer()
                task.wait()
            end
        end)
    end
end)
