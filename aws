local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local Tab1 = Library:NewWindow("AWS")
local Tab1Section1 = Tab1:NewSection("Tab1")

local champLoop, tpLoop, auraLoop, chestLoop

Tab1Section1:CreateToggle("Trial W13", function(value)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")

    if value then
        tpLoop = task.spawn(function()
            local player = Players.LocalPlayer
            while true do
                local char = player.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    char.HumanoidRootPart.CFrame = CFrame.new(2925, 11.5, 536)
                end
                task.wait()
            end
        end)

        champLoop = task.spawn(function()
            local remote = Knit:WaitForChild("Services"):WaitForChild("ChampionshipService")
                :WaitForChild("RF"):WaitForChild("RequestJoin")
            local args = { "Medieval" }
            while true do
                remote:InvokeServer(unpack(args))
                task.wait(1.1)
            end
        end)
    else
        if champLoop then task.cancel(champLoop) end
        if tpLoop then task.cancel(tpLoop) end
    end
end)

Tab1Section1:CreateToggle("WealthyOrc", function(value)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")
    local remote = Knit:WaitForChild("Services")
        :WaitForChild("ArmWrestleService")
        :WaitForChild("RF")
        :WaitForChild("RequestStartFight")
    local args = { "WealthyOrc" }

    if value then
        WealthyOrcLoop = task.spawn(function()
            while true do
                remote:InvokeServer(unpack(args))
                remote:InvokeServer(unpack(args))
                remote:InvokeServer(unpack(args))
                remote:InvokeServer(unpack(args))
                task.wait()
            end
        end)
    else
        if WealthyOrcLoop then task.cancel(WealthyOrcLoop) end
    end
end)

Tab1Section1:CreateToggle("Open OrcVault", function(value)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")

    if value then
        vaultLoop = task.spawn(function()
            local remote = Knit:WaitForChild("Services"):WaitForChild("ChestService")
                :WaitForChild("RF"):WaitForChild("Open")
            local args = { "OrcVault" }
            while true do
                remote:InvokeServer(unpack(args))
                task.wait(1)
            end
        end)
    else
        if vaultLoop then task.cancel(vaultLoop) end
    end
end)

Tab1Section1:CreateToggle("Open KingdomChest", function(value)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")

    if value then
        chestLoop = task.spawn(function()
            local remote = Knit:WaitForChild("Services"):WaitForChild("ChestService")
                :WaitForChild("RF"):WaitForChild("Open")
            local args = { "KingdomChest" }
            while true do
                remote:InvokeServer(unpack(args))
                task.wait()
            end
        end)
    else
        if chestLoop then task.cancel(chestLoop) end
    end
end)

Tab1Section1:CreateToggle("Aura Roll", function(value)
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Knit = ReplicatedStorage:WaitForChild("Packages"):WaitForChild("Knit")

    if value then
        auraLoop = task.spawn(function()
            local remote = Knit:WaitForChild("Services"):WaitForChild("AuraService")
                :WaitForChild("RF"):WaitForChild("Roll")
            while true do
                remote:InvokeServer()
                task.wait(0.7)
            end
        end)
    else
        if auraLoop then task.cancel(auraLoop) end
    end
end)

Tab1Section1:CreateButton("Antiafk & Antilag", function()
    local RunService = game:GetService("RunService")
    local Lighting = game:GetService("Lighting")
    local Terrain = workspace:FindFirstChildOfClass('Terrain')

    if Terrain then
        Terrain.WaterWaveSize = 0
        Terrain.WaterWaveSpeed = 0
        Terrain.WaterReflectance = 0
        Terrain.WaterTransparency = 1
    end

    Lighting.GlobalShadows = false
    Lighting.FogEnd = 9e9
    Lighting.FogStart = 9e9
    settings().Rendering.QualityLevel = 1

    for i, v in pairs(game:GetDescendants()) do
        if v:IsA("BasePart") then
            v.Material = Enum.Material.Plastic
            v.Reflectance = 0
            v.BackSurface = Enum.SurfaceType.SmoothNoOutlines
            v.BottomSurface = Enum.SurfaceType.SmoothNoOutlines
            v.FrontSurface = Enum.SurfaceType.SmoothNoOutlines
            v.LeftSurface = Enum.SurfaceType.SmoothNoOutlines
            v.RightSurface = Enum.SurfaceType.SmoothNoOutlines
            v.TopSurface = Enum.SurfaceType.SmoothNoOutlines
        elseif v:IsA("Decal") then
            v.Transparency = 1
        elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
            v.Lifetime = NumberRange.new(0)
        end
    end

    for i, v in pairs(Lighting:GetDescendants()) do
        if v:IsA("PostEffect") then
            v.Enabled = false
        end
    end

    workspace.DescendantAdded:Connect(function(child)
        task.spawn(function()
            if child:IsA('ForceField') or child:IsA('Sparkles') or child:IsA('Smoke') or child:IsA('Fire') or child:IsA('Beam') then
                RunService.Heartbeat:Wait()
                child:Destroy()
            end
        end)
    end)

    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        local VirtualUser = game:GetService("VirtualUser")
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
end)
