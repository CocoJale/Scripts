local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

Tab2Section2:CreateToggle("Auto SquidGame", function(val)
    autoSquidGameEnabled = val
    local p = Players.LocalPlayer
    local c = p.Character or p.CharacterAdded:Wait()
    local r = c:WaitForChild("HumanoidRootPart")
    local h = c:FindFirstChildOfClass("Humanoid")
    local rem = Events:WaitForChild("SquidGame"):WaitForChild("RemoteEvent")

    if val then
        if h then h.JumpPower = 0.001 end
        for _, part in ipairs(c:GetChildren()) do if part:IsA("BasePart") then part.CanCollide = false end end

        local squidParts = {}
        for _, v in ipairs(WS:GetDescendants()) do
            if (v.Name == "Wall" or v.Name == "WinHitbox") and v:IsA("BasePart") then
                v.CanCollide = false
                table.insert(squidParts, v)
            end
        end

        task.spawn(function()
            while autoSquidGameEnabled do
                rem:FireServer("Accepted")
                task.wait(5)
            end
        end)

        task.spawn(function()
            while autoSquidGameEnabled do
                for _, v in ipairs(squidParts) do v.CFrame = r.CFrame end
                task.wait(1)
                for _, v in ipairs(squidParts) do v.CFrame = r.CFrame * CFrame.new(0, 1000, 0) end
                task.wait(1)
                for _, v in ipairs(squidParts) do v.CFrame = r.CFrame end
                task.wait(1)
            end
        end)

        local HumanModCons = {}

        local function autoJump()
            if not autoSquidGameEnabled then
                if HumanModCons.ajLoop then
                    HumanModCons.ajLoop:Disconnect()
                    HumanModCons.ajLoop = nil
                end
                if HumanModCons.ajCA then
                    HumanModCons.ajCA:Disconnect()
                    HumanModCons.ajCA = nil
                end
                return
            end

            if c and h and h.RootPart then
                local pos = h.RootPart.Position
                local lookVector = h.RootPart.CFrame.LookVector

                local check1 = workspace:FindPartOnRay(Ray.new(pos - Vector3.new(0,1.5,0), lookVector * 3), h.Parent)
                local check2 = workspace:FindPartOnRay(Ray.new(pos + Vector3.new(0,1.5,0), lookVector * 3), h.Parent)
                if check1 or check2 then
                    h.Jump = true
                end
            end
        end

        HumanModCons.ajLoop = RunService.RenderStepped:Connect(autoJump)
        HumanModCons.ajCA = p.CharacterAdded:Connect(function(newChar)
            c = newChar
            h = newChar:WaitForChild("Humanoid")
            if h then h.JumpPower = 0.001 end
            autoJump()
            if HumanModCons.ajLoop then HumanModCons.ajLoop:Disconnect() end
            HumanModCons.ajLoop = RunService.RenderStepped:Connect(autoJump)
        end)

    else
        task.delay(1, function() rem:FireServer("LeaveWaitingRoom") end)
        -- Disconnect jump listeners when toggled off
        if HumanModCons then
            if HumanModCons.ajLoop then HumanModCons.ajLoop:Disconnect() end
            if HumanModCons.ajCA then HumanModCons.ajCA:Disconnect() end
            HumanModCons = nil
        end
    end
end)
